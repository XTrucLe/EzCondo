import axios from "axios";
import { getToken } from "./authService";
import { getApiUrl } from "@/utils/getApiUrl";

// Kh·ªüi t·∫°o Api instance
const createApiInstance = async () => {
  const baseURL = await getApiUrl(); // L·∫•y URL API t·ª´ Firebase Remote Config
  if (!baseURL) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y URL API t·ª´ Remote Config!");
  }
  console.log("üåê API URL:", baseURL);

  const api = axios.create({
    baseURL,
    timeout: 10000,
    headers: {
      "Content-Type": "application/json",
    },
  });

  api.interceptors.request.use(
    async (config) => {
      const token = await getToken();
      if (token && !config.headers["Authorization"]) {
        config.headers["Authorization"] = `Bearer ${token}`;
      }
      return config;
    },
    (error) => Promise.reject(error)
  );

  api.interceptors.response.use(
    (response) => response,
    (error) => {
      if (!error.response) {
        console.error(
          "[API ERROR] Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ server:",
          error.message
        );

        if (
          error.code === "ECONNABORTED" ||
          error.message === "Network Error"
        ) {
          return Promise.reject({
            message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi, ki·ªÉm tra m·∫°ng!",
            status: 0,
          });
        }

        return Promise.reject({
          message: "L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i!",
          details: null,
        });
      }

      const { status, data, config } = error.response;
      const errorMessage = errorMessages[status] || "ƒê√£ x·∫£y ra l·ªói!";

      console.error(`[API ERROR] ${status}: ${errorMessage}`);

      return Promise.reject(new Error(errorMessage));
    }
  );
  return api;
};

// M√£ l·ªói v√† th√¥ng b√°o t∆∞∆°ng ·ª©ng
const errorMessages: Record<number, string> = {
  400: "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá!",
  401: "Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!",
  403: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!",
  404: "Kh√¥ng t√¨m th·∫•y t√†i nguy√™n!",
  408: "Y√™u c·∫ßu qu√° l√¢u, vui l√≤ng th·ª≠ l·∫°i!",
  429: "Qu√° nhi·ªÅu y√™u c·∫ßu, h√£y th·ª≠ l·∫°i sau!",
  500: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau!",
  502: "M√°y ch·ªß g·∫∑p s·ª± c·ªë, th·ª≠ l·∫°i sau!",
  503: "D·ªãch v·ª• hi·ªán kh√¥ng kh·∫£ d·ª•ng!",
  504: "M√°y ch·ªß ph·∫£n h·ªìi ch·∫≠m, vui l√≤ng th·ª≠ l·∫°i!",
};

type ApiRequest = {
  method: "get" | "post" | "put" | "delete";
  url: string;
  data?: any;
  retryCount?: number;
};

// üõ†Ô∏è H√†m g·ªçi API c√≥ Retry t·ª± ƒë·ªông
export const request = async ({
  method,
  url,
  data,
  retryCount = 1,
}: ApiRequest) => {
  const api = await createApiInstance();
  for (let attempt = 0; attempt < retryCount; attempt++) {
    try {
      const response = await api({ method, url, data });
      console.log(`[API SUCCESS] ${method.toUpperCase()} ${url}`);

      return { data: response.data, error: null };
    } catch (error: any) {
      if (attempt === retryCount - 1 || !error.response) {
        console.error(`[API ERROR] Th·ª≠ l·∫ßn ${attempt + 1} th·∫•t b·∫°i:`, {
          message: error.message,
          response: error.response ? error.response.data : null,
          status: error.response ? error.response.status : "No response",
          header: error.config,
        });
        return { data: null, error: error.message };
      }
      console.warn(
        `[API RETRY] ƒêang th·ª≠ l·∫°i (${attempt + 1}/${retryCount})...`
      );
    }
  }
};
